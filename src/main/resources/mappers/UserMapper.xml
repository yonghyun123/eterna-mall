<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 네임스페이스(사용영역) 설정 -->
<mapper namespace="kr.or.kosta.eterna.user">

	<!-- 회원 생성 -->
	<insert id="create" parameterType="User">
		INSERT INTO sm_user
		(user_id,
		user_name,
		user_email,
		user_passwd,
		user_address,
		user_tel)
		VALUES
		(#{userId},
		#{userName},
		#{userEmail},
		#{userPasswd},
		#{userAddress},
		#{userTel})
	</insert>

	<!-- id를 이용한 회원 검색 -->
	<!-- 구매 등급 property 추가(tierId) by 이철우 -->
	<select id="read" resultType="User" parameterType="String">
        SELECT
		u.user_id	AS "userId",
		u.user_name AS "userName",
		u.user_email AS "userEmail",
		u.user_passwd AS "userPasswd",
		u.user_address AS "userAddress",
		u.user_tel AS "userTel",
		u.user_point AS "userPoint",
		TO_CHAR(u.user_regdate, 'YYYY-MM-DD') AS "userRegdate",
		u.tier_id AS "tierId",
        ut.tier_type AS "tierType",
		u.user_grade AS "userGrade"
		FROM sm_user u
        JOIN sm_user_tier ut
        ON u.tier_id = ut.tier_id
		WHERE u.user_id= #{userId}
	</select>
	
	<!-- 유저 포인트 적립금 업데이트(yonghyun) -->
	<update id="pointUpdate" parameterType="User">
		UPDATE SM_user
		<set>
			<if test="userPoint != null">user_point = #{userPoint},</if>
			<if test="userGrade != null">user_grade = #{userGrade}</if>
		</set>
		WHERE user_id=#{userId}
	</update>
	
	<!-- 유저가 사용한 쿠폰 지우기(yonghyun) -->
	<delete id="deleteCoupon" parameterType="User">
		DELETE 
		FROM SM_coupon_user
		WHERE id = #{couponId}
	</delete>
	

	<!--관리자 id를 이용한 회원 검색 (현우) -->    
		<!--                     
   <select id="read" resultType="User" parameterType="String">
      SELECT user_id                      AS "userId", 
             user_name                       AS "userName",
             user_email               AS "userEmail",
             user_passwd               AS "userPasswd",
             user_address               AS "userAddress",
             user_tel                  AS "userTel",
             t.tier_type                AS "tierId",
             user_grade               AS "userGrade",
             user_point               AS "userPoint",
             TO_CHAR(user_regdate, 'YYYY-MM-DD') AS "userRegdate" 
      FROM   SM_user u
      join SM_user_tier t
         ON u.tier_id = t.tier_id 
      WHERE user_id=#{userId}
   </select>
   -->

	<!-- id를 이용한 쿠폰 검색 -->
	<select id="coupon" resultType="User" parameterType="String">
		SELECT
		c.coupon_name AS "couponName",
		cu.start_date AS "couponStartDate",
		cu.end_date AS "couponEndDate",
		c.COUPON_RATE AS "couponRate",
		cu.ID AS "couponId"
		FROM sm_coupon_user cu
		LEFT OUTER JOIN sm_coupon c
		ON cu.coupon_id = c.coupon_id
		WHERE cu.user_id = #{userId}
		ORDER BY cu.end_date 
	</select>

	<!-- id를 이용한 쿠폰 개수만 가져오기-->
	<select id="couponLength" resultType="int" parameterType="String">
		SELECT Count(user_id) 
		FROM   sm_coupon_user 
		WHERE  user_id = #{userId} 
	</select>

	<!-- 회원 정보 수정 -->
	<update id="update" parameterType="User">
		UPDATE SM_user
		<set>
			<if test="userPasswd != null">user_passwd = #{userPasswd},</if>
			<if test="userEmail != null">user_email = #{userEmail},</if>
			<if test="userAddress != null">user_address = #{userAddress}</if>
		</set>
		WHERE user_id=#{userId}
	</update>

    <!-- 전체 회원 리스트 -->
    <select id="listAll" resultType="User">
         SELECT user_id       AS "userId", 
             user_name       AS "userName", 
             user_passwd       AS "userPasswd", 
             user_email      AS "userEmail",
             user_address      AS "userAddress", 
             user_tel          AS "userTel",
             t.tier_type      AS "tierId",
            TO_CHAR(user_regdate, 'YYYY-MM-DD') AS "userRegdate"
         FROM   SM_user u
         join SM_user_tier t
         ON u.tier_id = t.tier_id
    </select>

	<!-- 로그인시 id와 passwd를 통한 회원 조회 -->
	<select id="certify" resultType="User" parameterType="map">
		SELECT
		user_id AS "userId",
		user_name AS "userName",
		user_email AS "userEmail",
		user_passwd AS "userPasswd",
		user_address AS "userAddress",
		user_tel AS
		"userTel",
		tier_id AS "tierId",
		user_grade AS "userGrade",
		user_point AS
		"userPoint",
		TO_CHAR(user_regdate, 'YYYY-MM-DD') AS "userRegdate"
		FROM
		SM_user
		WHERE user_id=#{userId} AND user_passwd=#{userPasswd}
	</select>

	<!-- 유저별 구매 총액 조회 by 이철우 -->
	<select id="userPriceAmount" resultType="int" parameterType="String">
		SELECT NVL(SUM(total_price),0)
		FROM sm_buy_info
		WHERE user_id = #{userId}
	</select>
	
	<!-- 주문번호별 구매 총액 조회 by 이철우 -->
	<select id="orderPriceAmount" resultType="int" parameterType="String">
		SELECT SUM(total_price)
		FROM sm_buy_info
		WHERE id = #{id}
	</select>

	<!-- 유저의 다음 등급 도달에 필요한 금액 조회 by 이철우 -->
	<select id="searchUpTier" resultType="int" parameterType="String">
		SELECT sut.grade 
		FROM   sm_user su, 
       	sm_user_tier sut 
		WHERE  su.tier_id + 1 = sut.tier_id 
       	AND su.user_id = #{userId} 
	</select>
	
	<!-- 회원 삭제(id를 제외한 나머지 정보들 삭제) -->
	<update id="delete" parameterType="map">
		UPDATE SM_user
		SET user_name = NULL,
		user_email = NULL,
		user_passwd = NULL,
		user_address = NULL,
		user_tel = NULL,
		tier_id = NULL,
		user_grade = NULL,
		user_point = NULL,
		user_regdate = NULL
		WHERE user_id = #{userId}
		AND user_passwd =
		#{userPasswd}
	</update>
	
	<!-- 오늘 등록한 회원 수 -->
    <select id="newUser" resultType="int">
    SELECT Count(user_regdate) 
    FROM   sm_user 
    WHERE  To_char(To_date(user_regdate, 'YYYY/MM/DD HH24:MI:SS'), 'yyyymmdd') = 
        To_char(SYSDATE, 'yyyymmdd') 
    </select>
    
    <!-- 다음 등급까지 남은 차액 -->
    <select id="difference" resultType="int">
    SELECT NVL((sut.grade - su.user_grade),0) 
		FROM   sm_user su, 
       	sm_user_tier sut 
		WHERE  su.tier_id + 1 = sut.tier_id 
       	AND su.user_id = #{userId}
    </select>
    
    <!-- 등급 상승 -->
    <update id="updateGrade">
    UPDATE sm_user
    SET tier_id = tier_id +1 
    WHERE user_id = #{userId}
    </update>
</mapper>