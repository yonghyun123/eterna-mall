<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 네임스페이스(사용영역) 설정 -->
<mapper namespace="kr.or.kosta.eterna.buy">

    <!-- 주문리스트 추가 -->
    <!-- id 값 next.val 로 수정해야함!!!!!!!!!! -->
    <insert id="createInfo" parameterType="Buy">
		INSERT INTO sm_buy_info 
		      (id, 
		       buyer_name,
		       buyer_tel, 
		       buyer_address, 
		       receiver_name, 
		       receiver_tel, 
		       receiver_address,
		      <if test="passwd!=null">passwd,</if>
		       user_id) 
		VALUES     (9, 
		      #{buyerName}, 
		      #{buyerTel}, 
		      #{buyerAddress}, 
		      #{receiverName}, 
		      #{receiverTel}, 
		      #{receiverAddress}, 
		      <if test="passwd!=null">#{passwd},</if>
		      #{userId})
    </insert>
   
    <!-- 주문번호별 구매 목록 추가 -->
    <!-- id 값 next.val 로 수정해야함!!!!!!!!!! -->
    <insert id="createManage" parameterType="Buy">
		INSERT INTO sm_buy_manage 
		         (id, 
		          count, 
		          buy_id, 
		          product_id) 
		VALUES  (8, 
		          #{count}, 
		          (select MAX(id) from SM_buy_info), 
		          (select product_id from SM_product where product_description = #{productDescription})) 
    </insert>

	<!-- 유저별 구매 리스트 by 이철우 -->
	<select id="listClient" parameterType="String" resultType="Buy">
		SELECT bi.create_date          AS orderDate, 
		       bm.buy_id               AS orderNumber, 
		       p.product_brand         AS productBrand, 
		       p.product_description   AS productDescription, 
		       pp.price                AS productPrice, 
		       bm.count                AS count, 
		       bi.order_flag           AS orderFlag, 
		       bi.modify_date          AS receiveDate, 
		       bi.receiver_name        AS receiverName, 
		       bi.receiver_address     AS receiverAddress, 
		       bi.receiver_tel         AS receiverTel, 
		       ( bm.count * pp.price ) AS orderNumPrice, 
		       bm.id                   AS paymentKind, 
		       pi.file_id              AS fileName 
		FROM   sm_buy_manage bm 
		       JOIN sm_buy_info bi 
		         ON bm.buy_id = bi.id 
		       JOIN sm_product p 
		         ON bm.product_id = p.product_id 
		       JOIN sm_product_price pp 
		         ON p.product_id = pp.product_id 
		       JOIN sm_product_image pi 
		         ON pp.product_id = pi.product_id 
		WHERE  bi.user_id = #{userId} 
		       AND pi.image_type = 'th' 
		ORDER  BY ordernumber 
    </select>
    
    <!-- 전체 리스트 -->
    <select id="listAll" resultType="Buy">
		SELECT i.id as id,
		  i.buyer_name as buyerName, 
		   i.buyer_tel as buyerTel,
		   i.buyer_address as buyerAddress,
		   i.receiver_name as receiverName,
		   i.receiver_tel as receiverTel,
		   i.receiver_address as receiverAddress,       
		   i.user_id as userId,
		   i.order_flag as orderFlag,
		   i.create_date as createDate
		FROM   SM_buy_info i
    </select>
   
    <!-- 제품 가격 추가 -->
    <!-- 주문 상세보기 by 이철우 -->
    <select id="showOrderDetail" resultType="Buy">
		SELECT i.id as id,
		   m.count as count,
		   p.product_description as productDescription,
		   f.file_name as fileName,
           pp.price as productPrice
		FROM   SM_buy_info i 
		   join SM_buy_manage m 
		     ON i.id=m.buy_id 
		   join SM_product p 
		     ON m.product_id=p.product_id 
           join SM_product_Price pp
             ON p.product_id = pp.product_id
		   join SM_product_image e 
		     ON pp.product_id=e.product_id
		   join SM_file_info f
		      ON e.file_id = f.file_id
		WHERE i.id=#{id} and image_type='th'
    </select>
   
    <!-- 최근 3개의 배송지 조회 -->
    <select id="recentAddress" resultType="Buy">
		SELECT receiver_address as receiverAddress,
		      receiver_name as receiverName ,
		      receiver_tel as receiverTel
		FROM (SELECT * 
		    FROM   sm_buy_info 
		    ORDER  BY create_date DESC) 
		WHERE ROWNUM between 1 and 3 
		    AND user_id = #{userId} 
    </select>
   
    <!-- 희진 추가!!!! -->
    <!-- 월별 제품의(제품별) 판매량 -->
    <select id="salesperMonth" parameterType="String" resultType="Buy">
		SELECT SUM(m.count) AS count, 
		       P.product_description AS productDescription
		FROM   sm_buy_manage m 
		       join sm_buy_info i 
		         ON m.buy_id = i.id 
		       join sm_product p 
		         ON m.product_id = p.product_id 
		       join sm_category c 
		         ON p.category_id = c.category_id 
		WHERE  To_char(To_date(p.create_date), 'MM') = To_char(SYSDATE, 'MM') 
		       AND c.category_type = #{categoryId}
		GROUP  BY P.product_description
    </select>
   
    <!-- 월별 판매액 -->
    <select id="totalAmount" resultType="Buy">
		SELECT SUM(p.price * m.count) as amount, 
		    To_char(To_date(i.create_date, 'YYYY/MM/DD HH24:MI:SS'), 'yyyy/mm') as createDate 
		FROM   sm_buy_manage m 
		    join sm_product_price p 
		      ON m.product_id = p.product_id 
		    join sm_product r 
		      ON p.product_id = r.product_id 
		    join sm_buy_info i 
		      ON m.buy_id = i.id 
		GROUP  BY To_char(To_date(i.create_date, 'YYYY/MM/DD HH24:MI:SS'), 'yyyy/mm') 
    </select>
   
    <!-- 희진추가!! -->
    <!-- 배송 상태 변경 -->
    <update id="updateStatus">
    	Update SM_buy_info
    	set order_flag=#{orderFlag}
    	where id = #{id}
    </update>
   
    <!-- 배송상태가 배송전 인 상품들의 개수 -->
    <select id="newOrder" resultType="int">
	    SELECT Count(order_flag) 
	    FROM   sm_buy_info 
    	WHERE  order_flag = 0 
    </select>
    
   	<!-- 유저의 주문번호별 품목개수 조회 by 이철우 -->
	<select id="orderProductsLength" resultType="Buy">
		SELECT Count(bm.buy_id) AS numPurchase 
		FROM   sm_buy_info bi 
		       JOIN sm_buy_manage bm 
		         ON bi.id = bm.buy_id 
		WHERE  bi.user_id = #{userId} 
		GROUP  BY bm.buy_id 
	</select>
    
    
</mapper>